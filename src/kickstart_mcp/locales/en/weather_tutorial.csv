key,value
weather.step1.title,"Step 1: Set Up FastMCP Weather Server"
weather.step1.intro1,"So far, we've been implementing MCP servers using the standard approach with decorators like @server.list_tools() and @server.call_tool()."
weather.step1.intro2,"While this is the standard way to create MCP servers, there's a more Pythonic and efficient way using FastMCP."
weather.step1.intro3,"FastMCP (https://github.com/jlowin/fastmcp) is a high-level library that makes building MCP servers much simpler."
weather.step1.benefits.title,"Key benefits of FastMCP:"
weather.step1.benefits.1,"1. Less boilerplate code - just decorate your functions with @mcp.tool()"
weather.step1.benefits.2,"2. Built-in input validation and documentation"
weather.step1.benefits.3,"3. Automatic dependency management"
weather.step1.benefits.4,"4. Progress reporting and logging through Context object"
weather.step1.intro4,"In this tutorial, we'll rebuild our weather server using FastMCP to see how it simplifies our code."
weather.step1.dependencies,"First, let's add the required dependencies to your pyproject.toml:"
weather.step1.setup,"Now, let's create the FastMCP server with basic setup:"
weather.step1.lifespan,"The server_lifespan function needs to be kept to maintain context handling in FastMCP initialization"
weather.step1.existing,"The following code needs to be kept to maintain the existing functionality"
weather.step2.title,"Step 2: Implement Weather Tools"
weather.step2.intro1,"Now we'll implement the weather tools using FastMCP's decorators."
weather.step2.intro2,"Notice how we don't need to manually define input schemas or handle tool calls - FastMCP does this for us."
weather.step2.tools,"Add these tool implementations:"
weather.step2.modify,"If you already have these functions, just modify their decorators. You can now remove the functions that were originally marked with @server.list_tools and @server.call_tool"
weather.step2.automatic,"FastMCP will automatically manage list_tools and call_tool. All you need to do is decorate your functions with '@mcp.tool'"
weather.step2.main,"Now, let's modify the main function to support both SSE and stdio: "
